{"version":3,"sources":["components/StockRow.jsx","components/MarketTrendArrow.jsx","components/StocksList.jsx","chartConfig.js","components/StocksGraph.jsx","components/UnsafeScriptsWarning.jsx","components/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["StockRow","getStockValueColor","stock","current_value","history","slice","value","this","props","stock_data","react_default","a","createElement","className","is_selected","id","stock_name","onClick","toggleStockSelection","bind","toUpperCase","toFixed","react_sparklines_build","data","map","color","lib_default","date","time","React","Component","MarketTrendArrow","getArrow","_this","current_trend","title","StocksList","dist","render","_ref","online","resetData","areStocksLoaded","components_MarketTrendArrow","market_trend","Object","keys","stocks","index","current_stock","components_StockRow","key","colSpan","chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_values","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","StocksGraph","updateChart","chart","refs","chartInstance","length","datasets","update","chart_dataset","find","dataset","getStockValues","concat","splice","indexOf","componentDidUpdate","t","Date","y","resetZoom","es","options","ref","UnsafeScriptsWarning","Dashboard","state","undefined","show_unsafe_scripts_warning","saveNewStockValues","setState","result","JSON","parse","up_values_count","down_values_count","current_time","now","new_stocks","Number","push","newMarketTrend","up_count","down_count","pop","components_UnsafeScriptsWarning","build_default","url","onMessage","components_StocksList","components_StocksGraph","App","components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0129a934.chunk.js","sourcesContent":["import React from 'react'\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nimport TimeAgo from 'react-timeago'\n\nclass StockRow extends React.Component {\n\n  // lastUpdatedAt = (stock) => {\n  //   let time_diff = Date.now() - Number(stock.history.slice(-1)[0].time);\n  //   if(time_diff <= 4000){\n  //     // stays 'just now' until this function is called again for this stock: WRONG\n  //     return 'just now'\n  //   }\n  //   else if(time_diff > 4000 && time_diff <60000){\n  //     return 'few seconds ago'\n  //   }\n  //   else{\n  //     return Date.now(stock.history.slice(-1)[0].time).toLocaleString(undefined, {hour: 'numeric', minute: 'numeric'})\n  //   }\n  // }\n\n  getStockValueColor = (stock) =>{\n    if(stock.current_value < stock.history.slice(-2)[0].value){\n      return 'red';\n    }\n    else if(stock.current_value > stock.history.slice(-2)[0].value){\n      return 'green';\n    }\n    else{\n      return null;\n    }\n  }\n\n  render() {\n    let history = this.props.stock_data.history;\n    return (\n      <tr className={ this.props.stock_data.is_selected ? 'selected' : null } id={this.props.stock_name} onClick={this.props.toggleStockSelection.bind(this, this.props.stock_name)} >\n        <td>{this.props.stock_name.toUpperCase()}</td>\n        <td className={this.getStockValueColor(this.props.stock_data)}>\n          {this.props.stock_data.current_value.toFixed(2)}\n        </td>\n        <td>\n          <Sparklines data={history.map((history) => { return history.value})}>\n            <SparklinesLine color=\"blue\" />\n          </Sparklines>\n        </td>\n        <td className='updated_at'>\n          <TimeAgo date={ history.slice(-1)[0].time } />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockRow;","import React from 'react'\n\nclass MarketTrendArrow extends React.Component {\n\n  getArrow = () => {\n    if(this.props.current_trend === 'up'){\n      return <span className='up-arrow'>&#8679;</span>\n    }\n    else if(this.props.current_trend === 'down'){\n      return <span className='down-arrow'>&#8681;</span>\n    }\n    else{\n      return '-';\n    }\n  }\n\n  render() {\n    return (\n      <span title='Market trend' className={\"icon market-trend\"}>\n        {this.getArrow()}\n      </span>\n    );\n  }\n}\n\nexport default MarketTrendArrow;","import React from 'react'\nimport { Detector } from \"react-detect-offline\";\nimport StockRow from './StockRow.jsx'\nimport MarketTrendArrow from './MarketTrendArrow.jsx'\n\nconst StocksList = (props) => {\n  return (\n    <div className='card column is-one-third' id='stocks_list'>\n      <div className='card-header'>\n        <div className='card-header-title'>\n          Stocks\n          &nbsp;\n          {/*currently not handling the case when the internet is working but server is not responsding/server error, should be done through the websocket's connection info */}\n          <Detector\n            render={({ online }) => (\n              <span className={online ? \"tag is-success\" : \"tag is-danger\"}>\n                {online ? \"Live\" : \"Offline\"}\n              </span>\n            )}\n          />\n          &nbsp;\n          <button className='button is-small' onClick={props.resetData}>Clear history</button>\n        </div>\n      </div>\n      <div className='card-content'>\n        { props.areStocksLoaded() ? <p className='is-size-7 has-text-info'>Click on a stock to select/unselect</p> : null }\n        <table className='table is-bordered'>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>\n                Value\n                <MarketTrendArrow current_trend={props.market_trend} />\n              </th>\n              <th>History</th>\n              <th>Updated At</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(props.stocks).map((stock_name, index) =>\n              {\n                let current_stock = props.stocks[stock_name];\n                return (\n                  <StockRow\n                    key={index} stock_name={stock_name}\n                    stock_data={current_stock}\n                    toggleStockSelection={props.toggleStockSelection}\n                  />\n                )\n              }\n            )}\n            { props.areStocksLoaded() ? null : <tr><td colSpan='4'>No stocks loaded yet!</td></tr> }\n          </tbody>\n        </table>\n       </div>\n    </div>\n  );\n}\n\nexport default StocksList;\n","// configurations required for ChartJs\n\nexport const chartJsConfig = { \n  responsive: true,\n  scales: {\n    xAxes: [{\n      type: 'time',\n      distribution: 'linear',\n      ticks: {\n        source: 'auto'\n      },\n      time: {\n        displayFormats: {second: 'h:mm:ss a'},\n        unit: 'second'\n      },\n      scaleLabel: {\n        display: true,\n        labelString: 'Time'\n      }\n    }],\n    yAxes: [{\n      ticks: {\n        beginAtZero: true,\n        stepValue: 10,\n        steps: 10\n      },\n      scaleLabel: {\n        display: true,\n        labelString: 'Price ($)'\n      }\n    }]\n  },\n  pan: {\n    enabled: true,\n    mode: 'x'\n  },\n  zoom: {\n    enabled: true,\n    drag: false,\n    mode: 'x'\n  }\n};\n\n// keep enough colors (should be as many as the number of stocks recieved)\n// adding these manually to make sure the colors actually look good\nexport const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\n\nexport const chartDataset = (stock_name, color, stock_values) => {\n  return {\n    label: stock_name.toUpperCase(),\n    fill: false,\n    lineTension: 0,\n    backgroundColor: color,\n    borderColor: color,\n    borderCapStyle: 'butt',\n    borderJoinStyle: 'miter',\n    pointBorderColor: color,\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: color,\n    pointHoverBorderColor: color,\n    pointHoverBorderWidth: 2,\n    pointRadius: 3,\n    pointHitRadius: 10,\n    data: stock_values\n  };\n};\n","import React from 'react'\nimport {Line} from 'react-chartjs-2';\nimport * as zoom from 'chartjs-plugin-zoom'\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\n\nclass StocksGraph extends React.Component {\n\n  // too big a function?\n  updateChart = () => {\n    let chart = this.refs.chart.chartInstance;\n\n    if(Object.keys(this.props.stocks).length === 0)\n    {\n      chart.data.datasets = [];\n      return chart.update();\n    }\n\n    Object.keys(this.props.stocks).map((stock_name, index) =>\n    {\n      let current_stock = this.props.stocks[stock_name];\n      let chart_dataset = chart.data.datasets.find((dataset) => {\n        return dataset.label === stock_name.toUpperCase()\n      });\n\n      if(current_stock.is_selected)\n      {\n        let current_stock = this.props.stocks[stock_name];\n        if(chart_dataset)\n        {\n          // only update the data, don't create a new dataset for the graph\n          chart_dataset.data = this.getStockValues(current_stock);\n        }\n        else\n        {\n          // create a new dataset for graph\n          if(current_stock)\n          {\n            chart.data.datasets = chart.data.datasets.concat(\n              [\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\n              ]\n            )\n          }\n        }\n      }\n      else\n      {\n        if(chart_dataset)\n        {\n          // remove the dataset from graph\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\n        }\n      }\n      chart.update();\n    })\n  }\n\n  componentDidUpdate = () => {\n    this.updateChart();\n  }\n\n  // returns an array of objects, {t: timestamp, y: value}\n  getStockValues = (stock) =>{\n    return stock.history.map((history) => {\n      return {t: new Date(history.time), y: history.value};\n    })\n  }\n\n  resetZoom = () => {\n    this.refs.chart.chartInstance.resetZoom();\n  }\n\n  render() {\n    return (\n      <div className={'card column'} >\n        <div className='card-header'>\n          <div className='card-header-title'>\n            Graph\n          </div>\n        </div>\n        <div className='card-content'>\n          <p className='is-size-7 has-text-info'>\n            {\n              this.refs.chart &&\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\n            }\n          </p>\n          <button className=\"button is-small is-pulled-right\" onClick={this.resetZoom}>Reset zoom</button>\n          <Line\n            data={{datasets: []}}\n            options={chartJsConfig}\n            ref='chart'\n          />\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default StocksGraph;","import React from 'react'\n\nconst UnsafeScriptsWarning = props => {\n  return (\n    <div className='container'>\n      <div className='card'>\n        <div className='card-content'>\n          You need to click on &nbsp;<code>Load Unsafe Scripts</code>&nbsp; to proceed.\n          <br /> Look for the &nbsp;<code>shield icon</code>&nbsp; on your browser's addreess bar.  &#8679;\n          <br /><br />(Trust me, it's just an app which shows some simulated share market data :p)\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UnsafeScriptsWarning;","import React from 'react'\nimport Websocket from 'react-websocket';\nimport * as bulma from \"reactbulma\";\nimport StocksList from \"./StocksList.jsx\";\nimport StocksGraph from \"./StocksGraph.jsx\";\nimport UnsafeScriptsWarning from \"./UnsafeScriptsWarning\";\n\nconst stocksUrl = 'ws://stocks.mnet.website/';\n\nclass Dashboard extends React.Component {\n\n  state = {\n  // stocks = {name: {current_value: 12, history: [{time: '2131', value: 45}, ...], is_selected: false}, ...}\n   stocks: {},\n   market_trend: undefined, // 'up' or 'down'\n   show_unsafe_scripts_warning: true\n  }\n\n  saveNewStockValues = (data) => {\n    this.setState({show_unsafe_scripts_warning: false});\n    let result = JSON.parse(data);\n    let [up_values_count, down_values_count] = [0, 0];\n\n    // time stored in histories should be consisitent across stocks(better for graphs)\n    let current_time = Date.now();\n    let new_stocks = this.state.stocks\n    result.map((stock) =>\n    {\n      // stock = ['name', 'value']\n      if(this.state.stocks[stock[0]])\n      {\n        new_stocks[stock[0]].current_value > Number(stock[1]) ? up_values_count++ : down_values_count++;\n\n        new_stocks[stock[0]].current_value = Number(stock[1])\n        new_stocks[stock[0]].history.push({time: current_time, value: Number(stock[1])})\n      }\n      else\n      {\n        new_stocks[stock[0]] = { current_value: stock[1], history: [{time: Date.now(), value: Number(stock[1])}], is_selected: false }\n      }\n    });\n    this.setState({stocks: new_stocks, market_trend: this.newMarketTrend(up_values_count, down_values_count)})\n  }\n\n  // it's about the values that just came in, and not all the stocks\n  newMarketTrend = (up_count, down_count) => {\n    if(up_count === down_count) return undefined;\n    return up_count > down_count ? 'up' : 'down'\n  }\n\n  toggleStockSelection = (stock_name) => {\n    let new_stocks = this.state.stocks;\n    new_stocks[stock_name].is_selected = !new_stocks[stock_name].is_selected\n    this.setState({ stocks: new_stocks })\n  }\n\n  resetData = () => {\n    let new_stocks = this.state.stocks;\n    Object.keys(this.state.stocks).map((stock_name, index) =>\n    {\n      new_stocks[stock_name].history = [new_stocks[stock_name].history.pop()];\n    });\n    this.setState({ stocks: new_stocks });\n  }\n\n  areStocksLoaded = () => {\n    return Object.keys(this.state.stocks).length > 0;\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        { this.state.show_unsafe_scripts_warning ? <UnsafeScriptsWarning /> : null }\n        <Websocket url={stocksUrl} onMessage={this.saveNewStockValues} />\n        <div className='columns'>\n          <StocksList\n            stocks={this.state.stocks}\n            toggleStockSelection={this.toggleStockSelection}\n            resetData={this.resetData}\n            market_trend={this.state.market_trend}\n            areStocksLoaded={this.areStocksLoaded}\n          />\n          <StocksGraph stocks={this.state.stocks} />\n        </div>\n      </div>\n  );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard.jsx'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}